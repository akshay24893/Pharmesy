@model IEnumerable<Pharmeasy.Models.UserData>
@{
    ViewBag.Title = "RewPre";
}

<h2>Request Prescription</h2>
@if (TempData["Success"] != null)
{
    <p class="alert alert-success" id="successMessage">@TempData["Success"]</p>
    TempData["Success"] = null;
}
@using (Html.BeginForm())
{
    <div class="form-horizontal">
        <h4>Login</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("E-mail", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Editor("email", new { htmlAttributes = new { @class = "form-control" } })

            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Show" class="btn btn-default" />
            </div>
        </div>
    </div>

    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.fname)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.lname)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.mobile)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.usr_email)
            </th>

            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.fname)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.lname)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.mobile)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.usr_email)
                </td>

                <td>
                    @Html.ActionLink("Select", "Select", new { id = item.user_id })
                </td>
            </tr>
        }

    </table>
}